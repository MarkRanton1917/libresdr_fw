diff --git a/Makefile b/Makefile
index 0dc9c4b..77486b9 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,4 @@
-
-VIVADO_VERSION ?= 2022.2
+VIVADO_VERSION ?= 2019.1
 
 # Use Buildroot External Linaro GCC 7.3-2018.05 arm-linux-gnueabihf Toolchain
 CROSS_COMPILE = arm-linux-gnueabihf-
@@ -7,59 +6,52 @@ TOOLS_PATH = PATH="$(CURDIR)/buildroot/output/host/bin:$(CURDIR)/buildroot/outpu
 TOOLCHAIN = $(CURDIR)/buildroot/output/host/bin/$(CROSS_COMPILE)gcc
 
 NCORES = $(shell grep -c ^processor /proc/cpuinfo)
-VIVADO_SETTINGS ?= /opt/Xilinx/Vivado/$(VIVADO_VERSION)/settings64.sh
+VIVADO_SETTINGS = /home/vladimir/Xilinx/Vivado2019.1/Vivado/$(VIVADO_VERSION)/settings64.sh
 VSUBDIRS = hdl buildroot linux u-boot-xlnx
 
 VERSION=$(shell git describe --abbrev=4 --dirty --always --tags)
 LATEST_TAG=$(shell git describe --abbrev=0 --tags)
 UBOOT_VERSION=$(shell echo -n "PlutoSDR " && cd u-boot-xlnx && git describe --abbrev=0 --dirty --always --tags)
 HAVE_VIVADO= $(shell bash -c "source $(VIVADO_SETTINGS) > /dev/null 2>&1 && vivado -version > /dev/null 2>&1 && echo 1 || echo 0")
-XSA_URL ?= http://github.com/analogdevicesinc/plutosdr-fw/releases/download/${LATEST_TAG}/system_top.xsa
+SDK_DIR = $(CURDIR)/../../Vivado/system_top/system_top.sdk
 
 ifeq (1, ${HAVE_VIVADO})
 	VIVADO_INSTALL= $(shell bash -c "source $(VIVADO_SETTINGS) > /dev/null 2>&1 && vivado -version | head -1 | awk '{print $2}'")
 	ifeq (, $(findstring $(VIVADO_VERSION), $(VIVADO_INSTALL)))
-$(warning *** This repository has only been tested with $(VIVADO_VERSION),)
-$(warning *** and you have $(VIVADO_INSTALL))
-$(warning *** Please 1] set the path to Vivado $(VIVADO_VERSION) OR)
-$(warning ***        2] remove $(VIVADO_INSTALL) from the path OR)
-$(error "      3] export VIVADO_VERSION=v20xx.x")
+		$(warning " *** This repository has only been tested with $(VIVADO_VERSION),")
+		$(warning " *** and you have $(VIVADO_INSTALL)")
+		$(warning " *** Please 1] set the path to Vivado $(VIVADO_VERSION) OR")
+		$(warning " ***        2] remove $(VIVADO_INSTALL) from the path OR")
+		$(error   " ***        3] export VIVADO_VERSION=v20xx.x")
 	endif
+else
+$(error " *** Vivado required to run this Makefile")
 endif
 
-TARGET ?= pluto
-SUPPORTED_TARGETS:=pluto sidekiqz2
-
 # Include target specific constants
-include scripts/$(TARGET).mk
+include scripts/libre.mk
 
 ifeq (, $(shell which dfu-suffix))
 $(warning "No dfu-utils in PATH consider doing: sudo apt-get install dfu-util")
-TARGETS = build/$(TARGET).frm
+TARGETS = build/libre.frm
 ifeq (1, ${HAVE_VIVADO})
 TARGETS += build/boot.frm jtag-bootstrap
 endif
 else
-TARGETS = build/$(TARGET).dfu build/uboot-env.dfu build/$(TARGET).frm
+TARGETS = build/libre.dfu build/uboot-env.dfu build/libre.frm
 ifeq (1, ${HAVE_VIVADO})
 TARGETS += build/boot.dfu build/boot.frm jtag-bootstrap
 endif
 endif
 
-ifeq ($(findstring $(TARGET),$(SUPPORTED_TARGETS)),)
-all:
-	@echo "Invalid `TARGET variable ; valid values are: pluto, sidekiqz2" &&
-	exit 1
-else
-all: clean-build $(TARGETS) zip-all legal-info
-endif
+all: clean-build $(TARGETS) zip-all
 
 .NOTPARALLEL: all
 
-TARGET_DTS_FILES:=$(foreach dts,$(TARGET_DTS_FILES),build/$(dts))
+TARGET_DTS_FILES := $(foreach dts,$(TARGET_DTS_FILES),build/$(dts))
 
 TOOLCHAIN:
-	make -C buildroot ARCH=arm zynq_$(TARGET)_defconfig
+	make -C buildroot ARCH=arm zynq_libre_defconfig
 	make -C buildroot toolchain
 
 build:
@@ -72,7 +64,7 @@ build:
 ### u-boot ###
 
 u-boot-xlnx/u-boot u-boot-xlnx/tools/mkimage: TOOLCHAIN
-	$(TOOLS_PATH) make -C u-boot-xlnx ARCH=arm CROSS_COMPILE=$(CROSS_COMPILE) zynq_$(TARGET)_defconfig
+	$(TOOLS_PATH) make -C u-boot-xlnx ARCH=arm CROSS_COMPILE=$(CROSS_COMPILE) zynq_libre_defconfig
 	$(TOOLS_PATH) make -C u-boot-xlnx ARCH=arm CROSS_COMPILE=$(CROSS_COMPILE) UBOOTVERSION="$(UBOOT_VERSION)"
 
 .PHONY: u-boot-xlnx/u-boot
@@ -89,14 +81,17 @@ build/uboot-env.bin: build/uboot-env.txt
 ### Linux ###
 
 linux/arch/arm/boot/zImage: TOOLCHAIN
-	$(TOOLS_PATH) make -C linux ARCH=arm CROSS_COMPILE=$(CROSS_COMPILE) zynq_$(TARGET)_defconfig
+	$(TOOLS_PATH) make -C linux ARCH=arm CROSS_COMPILE=$(CROSS_COMPILE) zynq_libre_defconfig
 	$(TOOLS_PATH) make -C linux -j $(NCORES) ARCH=arm CROSS_COMPILE=$(CROSS_COMPILE) zImage UIMAGE_LOADADDR=0x8000
+	$(TOOLS_PATH) make -C linux -j $(NCORES) ARCH=arm CROSS_COMPILE=$(CROSS_COMPILE) uImage UIMAGE_LOADADDR=0x8000
 
 .PHONY: linux/arch/arm/boot/zImage
-
+.PHONY: linux/arch/arm/boot/uImage
 
 build/zImage: linux/arch/arm/boot/zImage | build
 	cp $< $@
+build/uImage: linux/arch/arm/boot/uImage  | build
+	cp $< $@
 
 ### Device Tree ###
 
@@ -109,45 +104,27 @@ build/%.dtb: linux/arch/arm/boot/dts/%.dtb | build
 ### Buildroot ###
 
 buildroot/output/images/rootfs.cpio.gz:
-	@echo device-fw $(VERSION)> $(CURDIR)/buildroot/board/$(TARGET)/VERSIONS
-	@$(foreach dir,$(VSUBDIRS),echo $(dir) $(shell cd $(dir) && git describe --abbrev=4 --dirty --always --tags) >> $(CURDIR)/buildroot/board/$(TARGET)/VERSIONS;)
-	make -C buildroot ARCH=arm zynq_$(TARGET)_defconfig
-
-ifneq (1, ${SKIP_LEGAL})
-	make -C buildroot legal-info
-	scripts/legal_info_html.sh "$(COMPLETE_NAME)" "$(CURDIR)/buildroot/board/$(TARGET)/VERSIONS"
-	cp build/LICENSE.html buildroot/board/$(TARGET)/msd/LICENSE.html
-endif
-
-	make -C buildroot BUSYBOX_CONFIG_FILE=$(CURDIR)/buildroot/board/$(TARGET)/busybox-1.25.0.config all
+	@echo device-fw $(VERSION)> $(CURDIR)/buildroot/board/libre/VERSIONS
+	@$(foreach dir,$(VSUBDIRS),echo $(dir) $(shell cd $(dir) && git describe --abbrev=4 --dirty --always --tags) >> $(CURDIR)/buildroot/board/libre/VERSIONS;)
+	make -C buildroot ARCH=arm zynq_libre_defconfig
+	make -C buildroot BUSYBOX_CONFIG_FILE=$(CURDIR)/buildroot/board/libre/busybox-1.25.0.config all
 
 .PHONY: buildroot/output/images/rootfs.cpio.gz
 
 build/rootfs.cpio.gz: buildroot/output/images/rootfs.cpio.gz | build
 	cp $< $@
 
-build/$(TARGET).itb: u-boot-xlnx/tools/mkimage build/zImage build/rootfs.cpio.gz $(TARGET_DTS_FILES) build/system_top.bit
-	u-boot-xlnx/tools/mkimage -f scripts/$(TARGET).its $@
+build/libre.itb: u-boot-xlnx/tools/mkimage build/zImage build/rootfs.cpio.gz $(TARGET_DTS_FILES) build/system_top.bit
+	u-boot-xlnx/tools/mkimage -f scripts/libre.its $@
 
-build/system_top.xsa:  | build
-ifeq (1, ${HAVE_VIVADO})
-	bash -c "source $(VIVADO_SETTINGS) && make -C hdl/projects/$(TARGET) && cp hdl/projects/$(TARGET)/$(TARGET).sdk/system_top.xsa $@"
-	unzip -l $@ | grep -q ps7_init || cp hdl/projects/$(TARGET)/$(TARGET).srcs/sources_1/bd/system/ip/system_sys_ps7_0/ps7_init* build/
-else ifneq ($(XSA_FILE),)
-	cp $(XSA_FILE) $@
-else ifneq ($(XSA_URL),)
-	wget -T 3 -t 1 -N --directory-prefix build $(XSA_URL)
-endif
-
-### TODO: Build system_top.xsa from src if dl fails ...
-
-build/sdk/fsbl/Release/fsbl.elf build/system_top.bit : build/system_top.xsa
+build/sdk/fsbl/Release/fsbl.elf build/system_top.bit build/ps7_init.tcl: | build
+	cp $(SDK_DIR)/system_top.hdf build
+	unzip -o build/system_top.hdf system_top.bit -d build
+	cp $(SDK_DIR)/system_top_hw_platform_0/ps7_init.tcl build
 	rm -Rf build/sdk
-ifeq (1, ${HAVE_VIVADO})
-	bash -c "source $(VIVADO_SETTINGS) && xsct scripts/create_fsbl_project.tcl"
-else
-	unzip -o build/system_top.xsa system_top.bit -d build
-endif
+	mkdir -p build/sdk/fsbl/Release
+	make -C $(SDK_DIR)/fsbl/Release all
+	cp $(SDK_DIR)/fsbl/Release/fsbl.elf build/sdk/fsbl/Release
 
 build/boot.bin: build/sdk/fsbl/Release/fsbl.elf build/u-boot.elf
 	@echo img:{[bootloader] $^ } > build/boot.bif
@@ -155,7 +132,7 @@ build/boot.bin: build/sdk/fsbl/Release/fsbl.elf build/u-boot.elf
 
 ### MSD update firmware file ###
 
-build/$(TARGET).frm: build/$(TARGET).itb
+build/libre.frm: build/libre.itb
 	md5sum $< | cut -d ' ' -f 1 > $@.md5
 	cat $< $@.md5 > $@
 
@@ -169,7 +146,7 @@ build/%.dfu: build/%.bin
 	dfu-suffix -a $<.tmp -v $(DEVICE_VID) -p $(DEVICE_PID)
 	mv $<.tmp $@
 
-build/$(TARGET).dfu: build/$(TARGET).itb
+build/libre.dfu: build/libre.itb
 	cp $< $<.tmp
 	dfu-suffix -a $<.tmp -v $(DEVICE_VID) -p $(DEVICE_PID)
 	mv $<.tmp $@
@@ -177,6 +154,7 @@ build/$(TARGET).dfu: build/$(TARGET).itb
 clean-build:
 	rm -f $(notdir $(wildcard build/*))
 	rm -rf build/*
+	rm -rf build_sdimg
 
 clean:
 	make -C u-boot-xlnx clean
@@ -185,12 +163,33 @@ clean:
 	make -C hdl clean
 	rm -f $(notdir $(wildcard build/*))
 	rm -rf build/*
+	rm -rf build_sdimg
+	
+overclock: build/sdk/fsbl/Release/fsbl.elf
+	test -n "$(OVERCLOCK_CPU_MULT)"  # Check environment veriable OVERCLOCK_CPU_MULT for overclock.
+	test -n "$(OVERCLOCK_DDR_MULT)"  # Check environment veriable OVERCLOCK_DDR_MULT for overclock.
+	bash -c "source $(VIVADO_SETTINGS) && ./overclock.sh $(OVERCLOCK_CPU_MULT) $(OVERCLOCK_DDR_MULT)"
+
+SDIMGDIR = $(CURDIR)/build_sdimg
+sdimg: build/
+	mkdir $(SDIMGDIR)
+	cp build/sdk/fsbl/Release/fsbl.elf 	$(SDIMGDIR)/fsbl.elf  
+	cp build/sdk/system_top/hw/system_top.bit 	$(SDIMGDIR)/system_top.bit
+	cp build/u-boot.elf 			$(SDIMGDIR)/u-boot.elf
+	cp $(CURDIR)/linux/arch/arm/boot/uImage	$(SDIMGDIR)/uImage
+	cp build/zynq-libre.dtb 	$(SDIMGDIR)/devicetree.dtb
+	cp build/uboot-env.txt  		$(SDIMGDIR)/uEnv.txt
+	cp build/rootfs.cpio.gz  		$(SDIMGDIR)/ramdisk.image.gz
+	mkimage -A arm -T ramdisk -C gzip -d $(SDIMGDIR)/ramdisk.image.gz $(SDIMGDIR)/uramdisk.image.gz
+	touch 	$(SDIMGDIR)/boot.bif
+	echo "img : {[bootloader] $(SDIMGDIR)/fsbl.elf  $(SDIMGDIR)/system_top.bit  $(SDIMGDIR)/u-boot.elf}" >  $(SDIMGDIR)/boot.bif
+	bash -c "source $(VIVADO_SETTINGS) && bootgen -image $(SDIMGDIR)/boot.bif -o i $(SDIMGDIR)/BOOT.bin"
 
 zip-all: $(TARGETS)
 	zip -j build/$(ZIP_ARCHIVE_PREFIX)-fw-$(VERSION).zip $^
 
-dfu-$(TARGET): build/$(TARGET).dfu
-	dfu-util -D build/$(TARGET).dfu -a firmware.dfu
+dfu-libre: build/libre.dfu
+	dfu-util -D build/libre.dfu -a firmware.dfu
 	dfu-util -e
 
 dfu-sf-uboot: build/boot.dfu build/uboot-env.dfu
@@ -199,17 +198,17 @@ dfu-sf-uboot: build/boot.dfu build/uboot-env.dfu
 		dfu-util -D build/uboot-env.dfu -a uboot-env.dfu
 	dfu-util -e
 
-dfu-all: build/$(TARGET).dfu build/boot.dfu build/uboot-env.dfu
+dfu-all: build/libre.dfu build/boot.dfu build/uboot-env.dfu
 	echo "Erasing u-boot be careful - Press Return to continue... " && read key && \
-		dfu-util -D build/$(TARGET).dfu -a firmware.dfu && \
+		dfu-util -D build/libre.dfu -a firmware.dfu && \
 		dfu-util -D build/boot.dfu -a boot.dfu  && \
 		dfu-util -D build/uboot-env.dfu -a uboot-env.dfu
 	dfu-util -e
 
-dfu-ram: build/$(TARGET).dfu
-	sshpass -p analog ssh root@$(TARGET) '/usr/sbin/device_reboot ram;'
+dfu-ram: build/libre.dfu
+	sshpass -p analog ssh root@libre '/usr/sbin/device_reboot ram;'
 	sleep 7
-	dfu-util -D build/$(TARGET).dfu -a firmware.dfu
+	dfu-util -D build/libre.dfu -a firmware.dfu
 	dfu-util -e
 
 jtag-bootstrap: build/u-boot.elf build/ps7_init.tcl build/system_top.bit scripts/run.tcl scripts/run-xsdb.tcl
@@ -219,11 +218,6 @@ jtag-bootstrap: build/u-boot.elf build/ps7_init.tcl build/system_top.bit scripts
 sysroot: buildroot/output/images/rootfs.cpio.gz
 	tar czfh build/sysroot-$(VERSION).tar.gz --hard-dereference --exclude=usr/share/man --exclude=dev --exclude=etc -C buildroot/output staging
 
-legal-info: buildroot/output/images/rootfs.cpio.gz
-ifneq (1, ${SKIP_LEGAL})
-	tar czvf build/legal-info-$(VERSION).tar.gz -C buildroot/output legal-info
-endif
-
 
 git-update-all:
 	git submodule update --recursive --remote
diff --git a/download_and_test.sh b/download_and_test.sh
index 4cd279c..ed3f80f 100755
--- a/download_and_test.sh
+++ b/download_and_test.sh
@@ -1,11 +1,11 @@
 #~/bin/sh
-# This resets a connected pluto, loads firmware into ram, and boots it
+# This resets a connected pluto (libre clone), loads firmware into ram, and boots it
 #
 
 #default IP address
 ipaddr=192.168.2.1
 
-if [ ! -f ./build/pluto.dfu ] ; then
+if [ ! -f ./build/libre.dfu ] ; then
     echo no file to upload
     exit
 fi
@@ -32,4 +32,4 @@ do
 done
 
 # -R resets/terminates the dfu after we are done
-sudo dfu-util -R -d 0456:b673,0456:b674 -D ./build/pluto.dfu -a firmware.dfu
+sudo dfu-util -R -d 0456:b673,0456:b674 -D ./build/libre.dfu -a firmware.dfu
diff --git a/overclock.sh b/overclock.sh
new file mode 100755
index 0000000..f87a7b6
--- /dev/null
+++ b/overclock.sh
@@ -0,0 +1,65 @@
+#!/bin/bash
+
+if [ "$#" -lt 2 ]; then
+    echo "Usage $0: OVERCLOCK_CPU_MULT OVERCLOCK_DDR_MULT"
+    echo "Note that we set frequency multipliers, rather than absolute frequency."
+    echo "Multipliers are presented as decimal numbers."
+    echo "Example: $0 40 28"
+    exit 1
+fi
+
+SDK_PATH="build/sdk/fsbl"
+PS7_INIT_FILE="${SDK_PATH}/src/ps7_init.c"
+
+if [ ! -f "${PS7_INIT_FILE}" ]; then
+    echo "${PS7_INIT_FILE} not found!"
+    exit 2
+fi
+
+
+cpu_mult_template='EMIT_MASKWRITE\(0XF8000100, 0x0007F000U ,0x000XX000U\),'
+cpu_mult_find='\s'"${cpu_mult_template/XX/(..)}"
+ddr_mult_template='EMIT_MASKWRITE\(0XF8000104, 0x0007F000U ,0x000XX000U\),'
+ddr_mult_find='\s'"${ddr_mult_template/XX/(..)}"
+
+current_cpu_mult_hex=$(head -n 1 <<< $(sed -rn 's/'"${cpu_mult_find}"'/\1/p' "$PS7_INIT_FILE"))
+current_ddr_mult_hex=$(head -n 1 <<< $(sed -rn 's/'"${ddr_mult_find}"'/\1/p' "$PS7_INIT_FILE"))
+
+current_cpu_mult=$(echo "ibase=16; ${current_cpu_mult_hex}" | bc)
+current_ddr_mult=$(echo "ibase=16; ${current_ddr_mult_hex}" | bc)
+
+new_cpu_mult=$1
+new_ddr_mult=$2
+
+if ! [[ "$new_cpu_mult" =~ '^[0-9]+$' ]]; then
+    if [ "$new_cpu_mult" -ge 128 ] || [ "$new_cpu_mult" -le 0 ]; then
+	echo "CPU multiplier ${new_cpu_mult} is invalid. Must be >0 and <128"
+	exit 3
+    fi
+fi
+
+if ! [[ "$new_ddr_mult" =~ '^[0-9]+$' ]]; then
+    if [ "$new_ddr_mult" -ge 128 ] || [ "$new_ddr_mult" -le 0 ]; then
+	echo "DDR multiplier ${new_ddr_mult} is invalid. Must be >0 and <128"
+	exit 4
+    fi
+fi
+
+cpu_mult_replace="${cpu_mult_template/XX/${new_cpu_mult}}"
+
+echo "Current CPU multiplier: ${current_cpu_mult}, new multiplier ${new_cpu_mult}"
+echo "Current DDR multiplier: ${current_ddr_mult}, new multiplier ${new_ddr_mult}"
+
+new_cpu_mult_hex=$(printf "%02X" $new_cpu_mult)
+cpu_mult_replace="    ${cpu_mult_template/XX/${new_cpu_mult_hex}}"
+new_ddr_mult_hex=$(printf "%02X" $new_ddr_mult)
+ddr_mult_replace="    ${ddr_mult_template/XX/${new_ddr_mult_hex}}"
+
+sed -i -r 's/'"${cpu_mult_find}"'/'"${cpu_mult_replace}"'/g' "$PS7_INIT_FILE"
+sed -i -r 's/'"${ddr_mult_find}"'/'"${ddr_mult_replace}"'/g' "$PS7_INIT_FILE"
+
+cd "$SDK_PATH/Release"
+make clean
+make
+
+echo 'Done. Run "make sdimg" now to create overclocked firmware.'
diff --git a/scripts/create_fsbl_project.tcl b/scripts/create_fsbl_project.tcl
index 4cbf1b7..93a49f6 100644
--- a/scripts/create_fsbl_project.tcl
+++ b/scripts/create_fsbl_project.tcl
@@ -1,7 +1,7 @@
-hsi open_hw_design build/system_top.xsa
+hsi open_hw_design build/system_top.hdf
 set cpu_name [lindex [hsi get_cells -filter {IP_TYPE==PROCESSOR}] 0]
 
 setws ./build/sdk
-app create -name fsbl -hw build/system_top.xsa -proc $cpu_name -os standalone -lang C -template {Zynq FSBL}
-app config -name fsbl -set build-config release
-app build -name fsbl
+createapp -app {Zynq FSBL} -name fsbl -proc $cpu_name -os standalone -lang C -hwproject ZC702_hw_platform
+configapp -app fsbl build-config release
+projects -type app -name fsbl -build 
diff --git a/scripts/libre.its b/scripts/libre.its
new file mode 100644
index 0000000..672b3ae
--- /dev/null
+++ b/scripts/libre.its
@@ -0,0 +1,159 @@
+/*
+ * U-Boot uImage source file with multiple kernels, ramdisks and FDT blobs
+ * This example makes use of the 'loadables' field
+ */
+
+/*
+ * fdt get addr foo /images/fdt@1 data
+ */
+
+/dts-v1/;
+
+/ {
+	description = "Configuration to load fpga before Kernel";
+	magic = "ITB PlutoSDR (ADALM-PLUTO)";
+	#address-cells = <1>;
+	images {
+
+		fdt@1 {
+			description = "zynq-libre-sdr";
+			data = /incbin/("../build/zynq-libre.dtb");
+			type = "flat_dt";
+			arch = "arm";
+			compression = "none";
+		};
+
+
+		fpga@1 {
+			description = "FPGA";
+			data = /incbin/("../build/system_top.bit");
+			type = "fpga";
+			arch = "arm";
+			compression = "none";
+			load = <0xF000000>;
+			hash@1 {
+				algo = "md5";
+			};
+		};
+
+		linux_kernel@1 {
+			description = "Linux";
+			data = /incbin/("../build/zImage");
+			type = "kernel";
+			arch = "arm";
+			os = "linux";
+			compression = "none";
+			load = <0x8000>;
+			entry = <0x8000>;
+			hash@1 {
+				algo = "md5";
+			};
+		};
+		ramdisk@1 {
+			description = "Ramdisk";
+			data = /incbin/("../build/rootfs.cpio.gz");
+			type = "ramdisk";
+			arch = "arm";
+			os = "linux";
+			compression = "gzip";
+			hash@1 {
+				algo = "md5";
+			};
+		};
+
+	};
+
+	configurations {
+		default = "config@0";
+		config@0 {
+			description = "Linux with fpga RevA";
+			fdt = "fdt@1";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		/* all below is currently RevB ! */
+
+		config@1 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@2 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@3 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@4 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@5 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@6 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+
+		config@7 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@8 { /* This one is actually RevC */
+			description = "Linux with fpga RevC";
+			fdt = "fdt@3";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@9 { /* This one is actually RevB */
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+
+		config@10 {
+			description = "Linux with fpga RevB";
+			fdt = "fdt@2";
+			kernel = "linux_kernel@1";
+			ramdisk = "ramdisk@1";
+			fpga = "fpga@1";
+		};
+	};
+};
diff --git a/scripts/libre.mk b/scripts/libre.mk
new file mode 100644
index 0000000..08bccfe
--- /dev/null
+++ b/scripts/libre.mk
@@ -0,0 +1,10 @@
+
+# Target specific constants go here
+
+#HDF_URL:=http://github.com/analogdevicesinc/plutosdr-fw/releases/download/${LATEST_TAG}/system_top.hdf
+TARGET_DTS_FILES:= zynq-libre.dtb
+COMPLETE_NAME:=LIBRE
+ZIP_ARCHIVE_PREFIX:=libresdr
+DEVICE_VID:=0x0456
+DEVICE_PID:=0xb673
+
